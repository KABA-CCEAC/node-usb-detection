---
notifications:
  email: false
language: cpp
addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - build-essential
    - g++-4.8
    - g++-4.8-multilib
    - gcc-multilib
sudo: true

# Build matrix
os:
- linux
- osx
env:
  global:
  - secure: "CZZYc72Vyft6srihAyJkbBrGg41BclhSn+Y7fjJOhyvAA6ne7WuW83goIY9CGAxBsqhz+HezG4UNmZf0j0UCVBAcFdblItdzW+VbaWCR7+MfrWP+KMVHsaTV81loLO5LwmEl9/I/Tta17KXG1ILcXoWJl96pTf/zO/RnECSBVMgRaIxuiVY7OdzuWvws/DVJEisWbAB3aMUmbo/sN50+jS7LHfRefnPW8MjT6RickDsL6y9fibYoacaUA6vQFwqqvDGBbZLG4fXs25mDQzdlWNsaaBsD0iv4S6IDQU3we5NZOAB5Z9MgZLN5GKei49hkbPOI411M0JmVU3hP2OZHxMCHAnN3crBtr7nmLY8Px3RLzMHw0UBwAr1r4r2GOSezl+yxpwlEhDXaG4ncJ+6KOuyhTk/Asbe/bLJpZnXe5v8mMr9QpMM1MFdBuM0C78baOIk7o+Fi9K/2Sp+I1Zg9qthjHAUGCI+6lPNOcnof4zLSWugBVzPZ1sGxFEIuMCUPWo8QBffiJ5J+sr6yX+r9fpSgd6nCCtkJ05UcwCfBAJyk9BDmt7vGQvLbNKVz3sIeKmti38KiPFaS7ZZHsXe+RPXSpC4IVTgJHwvA8It+Y3PN6pIiBt1NsGJwrYjKo/y02ls2lTFbqK6p8KpLCGbfLbOEDveB4YenH01eIahANhs="
  matrix:
  - TRAVIS_NODE_VERSION="4"
  - TRAVIS_NODE_VERSION="4" ARCH="x86"
  - TRAVIS_NODE_VERSION="6"
  - TRAVIS_NODE_VERSION="6" ARCH="x86"
  - BINARY_BUILDER="true" TRAVIS_NODE_VERSION="8"
  - BINARY_BUILDER="true" TRAVIS_NODE_VERSION="8" ARCH="x86"
matrix:
  exclude:
  - os: osx
    env: TRAVIS_NODE_VERSION="4" ARCH="x86"
  - os: osx
    env: TRAVIS_NODE_VERSION="6" ARCH="x86"
  - os: osx
    env: BINARY_BUILDER="true" TRAVIS_NODE_VERSION="8" ARCH="x86"

cache:
  directories:
    - $HOME/.npm/
    - $HOME/.npm-cache/

before_install:

# download node if testing x86 architecture
- >
  if [[ "$ARCH" == "x86" ]]; then
    EXPANDED_VERSION=$(curl https://semver.io/node/resolve/$TRAVIS_NODE_VERSION);
    echo "EXPANDED_VERSION =" $EXPANDED_VERSION
    BASE_URL=https://nodejs.org/dist/v$EXPANDED_VERSION;
    X86_FILE=node-v$EXPANDED_VERSION-$(node -p "process.platform")-x86;
    echo "X86_FILE =" $X86_FILE;
    wget $BASE_URL/$X86_FILE.tar.gz;
    tar -xf $X86_FILE.tar.gz;
    nvm deactivate;
    export PATH=$X86_FILE/bin:$PATH;
    if [[ $TRAVIS_OS_NAME == "linux" ]]; then sudo apt-get install libudev-dev:i386; fi
  else
    nvm install $TRAVIS_NODE_VERSION
    if [[ $TRAVIS_OS_NAME == "linux" ]]; then sudo apt-get install libudev-dev; fi
  fi;
# use g++-4.8 on Linux
- if [[ $TRAVIS_OS_NAME == "linux" ]]; then export CXX=g++-4.8; fi
- $CXX --version

# upgrade npm if on node 4 as npm2 doesn't like our dev peer deps
- if [[ $TRAVIS_NODE_VERSION == "4" ]]; then npm install -g npm; fi

# Cleanup the output of npm
- npm config set progress false
- npm config set spin false

# print versions
- uname -a
- which node; file `which node`
- node --version
- node -p 'process.platform + "@" + process.arch'
- npm --version

# figure out if we should publish
- PUBLISH_BINARY=false
- echo $TRAVIS_BRANCH
- echo `git describe --tags --always HEAD`
- if [[ $TRAVIS_BRANCH == `git describe --tags --always HEAD` ]]; then PUBLISH_BINARY=$BINARY_BUILDER; fi;
- echo "Publishing native platform Binary Package? ->" $PUBLISH_BINARY

install:
# ensure source install works
- npm install --build-from-source

script:
# Tests are disabled until we have tests which are suitable for CI and don't require manual interaction.
# - npm test
- echo "Skipping tests on CI, as they currently require manual interaction."

# if publishing, do it
- >
  if [[ $PUBLISH_BINARY == true ]]; then
    npm run prebuild;
  fi;
